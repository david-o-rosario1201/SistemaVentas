@page "/HistorialProveedores"
@rendermode InteractiveServer
@inject ProveedoresService proveedoresService
@inject TiposContribuyenteService tiposContribuyenteService
@inject NavigationManager navigation
@inject NotificationService notificationService

<PageTitle>Historial de Proveedores</PageTitle>
<RadzenNotification />
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h1 class="text-center"><strong>Historial de Proveedores</strong></h1>
		</div>
		@*Body*@
		<div class="card-body">
			@if (loading)
			{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info">
					</div>
				</div>
			}
			else if (proveedores.Count == 0)
			{
				<h1 class="miMensaje"><i class="bi bi-exclamation-triangle" /> No hay proveedores creados</h1>
			}
			else
			{
				@*Fechas*@
				<div class="mb-3">
					<div class="row">
						<div class="col-3">
							<label class="form-label" for="desde"><strong>Desde</strong></label>
							<InputDate id="desde" class="form-control" @bind-Value="desde"></InputDate>
						</div>
						<div class="col-3">
							<label class="form-label" for="hasta"><strong>Hasta</strong></label>
							<InputDate id="hasta" class="form-control" @bind-Value="hasta"></InputDate>
						</div>
					</div>
				</div>

				@*Filtro*@
				<div class="mb-3">
					<div class="row align-items-center">
						<label class="form-label" for="filtro"><strong>Filtro</strong></label>
						@*Select*@
						<div class="col-3">
							<InputSelect id="filtro" class="form-select" @bind-Value="filtro">
								<option>Elige una opci&oacute;n</option>
								<option value="id">Id</option>
								<option value="empresa">Empresa</option>
								<option value="contribuyente">Contribuyente</option>
								<option value="rnc">RNC</option>
							</InputSelect>
						</div>
						@*Flecha*@
						<div class="col-auto miFlecha">
							<p>→</p>
						</div>
						@*Datos a filtrar*@
						<div class="col-4">
							<div class="input-group">
								<InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
								<button class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
							</div>
						</div>
						@*Restablecer*@
						<div class="col-auto">
							<button class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
						</div>
					</div>
				</div>

				@*Tabla*@
				<table class="table table-bordered miTabla">
					<thead>
						<tr>
							<th>ProveedorId</th>
							<th>Fecha de Creaci&oacute;n</th>
							<th>Empresa</th>
							<th>Direcci&oacute;n</th>
							<th>Contribuyente</th>
							<th>RNC</th>
							<th>Acciones</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var proveedor in proveedores)
						{
							<tr>
								<td>@proveedor.ProveedorId</td>
								<td>@proveedor.FechaCreacion.ToShortDateString()</td>
								<td>@proveedor.Empresa</td>
								<td>@proveedor.Direccion</td>
								<td>@BuscarContribuyente(proveedor.TipoContribuyenteId)</td>
								<td>@proveedor.RNC</td>
								<td>
									<div class="btn-group" role="group">
										<button type="button" class="btn btn-outline-info" @onclick="()=> IrADetalles(proveedor.ProveedorId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Ver detalles">
											<i class="bi bi-eye"></i>
										</button>
										@if (proveedor.Eliminado == true)
										{
											<button type="button" class="btn btn-outline-success" @onclick="()=> Restaurar(proveedor.ProveedorId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Restaurar">
												<i class="bi bi-clock-history"></i>
											</button>
										}
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		@*Footer*@
		<div class="card-footer">
			<p><strong>Total de Proveedores:</strong> @proveedores.Count</p>
		</div>
	</div>
</div>

@code {
	public bool loading { get; set; } = true;
	public DateTime desde { get; set; } = DateTime.Today;
	public DateTime hasta { get; set; } = DateTime.Today;
	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public List<Proveedores> proveedores = new List<Proveedores>();
	public List<TiposContribuyente> tiposContribuyente = new List<TiposContribuyente>();

	protected override async Task OnInitializedAsync()
	{
		proveedores = await proveedoresService.Listar(p => p.ProveedorId > 0);
		tiposContribuyente = await tiposContribuyenteService.Listar(tc => tc.TipoContribuyenteId > 0);

		loading = false;

		if (proveedores.Count == 0)
			StateHasChanged();
	}


	public async Task Buscar()
	{
		if (desde > hasta)
		{
			MostrarNotificacion(
				"error", "La fecha inicial no debe ser mayor a la fecha final", "Error al filtrar");
			return;
		}

		if (filtro is null)
		{
			MostrarNotificacion(
				"error", "Debe elegir un filtro", "Error al filtrar");
			return;
		}

		if (valorFiltro is null)
		{
			MostrarNotificacion(
				"error", "Debe ingresar un dato para filtrar", "Error al filtrar");
			return;
		}

		switch (filtro)
		{
			case "id":
				if (int.TryParse(valorFiltro, out int id))
				{
					var buscarId = proveedores.FirstOrDefault
					(p => p.ProveedorId == id && p.FechaCreacion >= desde && p.FechaCreacion <= hasta);

					if (buscarId != null)
					{
						proveedores.Clear();
						proveedores.Add(buscarId);
						MostrarNotificacion("exito", "Datos encontrados con éxito", "Éxito al filtrar");
					}
					else
					{
						MostrarNotificacion("error", "No se pudieron encontrar los datos", "Error al filtrar");
						await Task.Delay(2000);
						MostrarNotificacion("info", "Verifique que la fecha sea la correcta", "Información de ayuda");
					}
				}
				else
					MostrarNotificacion("error", "El dato ingresado para el id no es válido", "Error al filtrar");
				break;

			case "empresa":
				var empresa = proveedores.Where
				(p => p.Empresa.ToLower().Contains(valorFiltro.ToLower())
				&& p.FechaCreacion >= desde && p.FechaCreacion <= hasta).ToList();

				if (empresa.Count > 0)
				{
					proveedores = empresa;
					MostrarNotificacion("exito", "Datos encontrados con éxito", "Éxito al filtrar");
				}
				else
				{
					MostrarNotificacion("error", "No se pudieron encontrar los datos", "Error al filtrar");
					await Task.Delay(2000);
					MostrarNotificacion("info", "Verifique que la fecha sea la correcta", "Información de ayuda");
				}
				break;

			case "contribuyente":
				var contribuyentes = tiposContribuyente
					.FirstOrDefault(tc => tc.TipoContribuyente.ToLower().Contains(valorFiltro.ToLower()));

				var result = proveedores.Where
				(p => p.TipoContribuyenteId == contribuyentes.TipoContribuyenteId
					&& p.FechaCreacion >= desde && p.FechaCreacion <= hasta).ToList();

				if (result.Count > 0)
				{
					proveedores = result;
					MostrarNotificacion("exito", "Datos encontrados con éxito", "Éxito al filtrar");
				}
				else
				{
					MostrarNotificacion("error", "No se pudieron encontrar los datos", "Error al filtrar");
					await Task.Delay(2000);
					MostrarNotificacion("info", "Verifique que la fecha sea la correcta", "Información de ayuda");
				}
				break;

			case "rnc":
				if (valorFiltro.All(c => char.IsDigit(c)))
				{
					var rnc = proveedores.Where
						(p => p.RNC.Contains(valorFiltro)
						&& p.FechaCreacion >= desde && p.FechaCreacion <= hasta).ToList();

					if (rnc.Count > 0)
					{
						proveedores = rnc;
						MostrarNotificacion("exito", "Datos encontrados con éxito", "Éxito al filtrar");
					}
					else
					{
						MostrarNotificacion("error", "No se pudieron encontrar los datos", "Error al filtrar");
						await Task.Delay(2000);
						MostrarNotificacion("info", "Verifique que la fecha sea la correcta", "Información de ayuda");
					}
				}
				else
					MostrarNotificacion("error", "El dato ingresado para el RNC no es válido", "Error al filtrar");
				break;
		}
	}

	public async Task Restablecer()
	{
		proveedores = await proveedoresService.Listar(p => p.Eliminado == false);
		MostrarNotificacion("exito", "Los datos fueron restaurados con éxito", "Éxito al restaurar");
	}

	public void MostrarNotificacion(string tipo, string mensaje, string summary)
	{
		if (tipo == "exito")
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = summary,
					Detail = mensaje,
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}

		if (tipo == "error")
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = summary,
					Detail = mensaje,
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}

		if (tipo == "info")
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Info,
					Summary = summary,
					Detail = mensaje,
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}
	}

	public string BuscarContribuyente(int id)
	{
		return "hola";
	}

	public void IrADetalles(int id)
	{
		
	}

	public void Restaurar(int id)
	{

	}
}
